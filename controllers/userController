const User = require("../models/userModel");
const asyncHandler = require("express-async-handler");
const { generateToken } = require("../config/jwtToken.js");
const validateMongDBid = require("../utils/validateMonDBid.js");
const refreshToken = require("../config/refreshToken.js");
const jwt = require('jsonwebtoken');
const sendEmail = require("./emailController");
const crypto = require('crypto');
const { error } = require("console");

const createUser = asyncHandler(async (req, res) => {
  const email = req.body.email;
  const findUser = await User.findOne({ email: email });
  if (!findUser) {
    //create a new user
    const newUser = await User.create(req.body);
    res.json({ msg: `Registration was succesfull!`, newUser });
  } else {
    //user already exist
    throw new Error("User already exist");
  }
});

const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;
  //console.log(email, password);
  //checking if user exist
  const findUser = await User.findOne({ email });
  if (findUser && (await findUser.isPasswordMatched(password))) {
    const refToken = await refreshToken(findUser?._id); 
    const updateUser = await User.findByIdAndUpdate(
      findUser.id,
      {
        refreshToken:refToken,
      },
      {new:true}
    )
    res.cookie(`refreshToken`, refToken, {
      httpOnly: true,
      maxAge: 24*60*60*1000,
    })
    res.json({
      msg: `${findUser.firstname} was succesfully logged in!`,
      _id: findUser?._id,
      firsname: findUser?.firstname,
      lastname: findUser?.lastname,
      email: findUser?.email,
      mobile: findUser?.mobile,
      token: generateToken(findUser?._id),
    });
  } else {
    throw new Error("Invalid credential");
  }
});

//handle refresh token
const handleRefreshToken = asyncHandler(async (req, res) => {
  const cookie = req.cookies;
  if (!cookie?.refreshToken) throw new Error(`Cookies with out refresh token`)
  const refreshToken = cookie.refreshToken;
  //console.log(refreshToken);
  const user = await User.findOne({ refreshToken });
  if (!user) throw new Error(`no refresh token in db or not matches`)
  jwt.verify(refreshToken, process.env.JWT_SECRET, (err, decoded) => {
  if (err || user.id !== decoded.id)
  throw new Error(`Something wrong with token`);
  const accessToken = generateToken(user?._id);
  res.json({ accessToken, user });
  //console.log(decoded);
  });
})

//logout
const logOut = asyncHandler(async (req, res) => {
  const cookie = req.cookies;
  
  if (!cookie?.refreshToken) throw new Error(`Cookies with out refresh token`);
  const refreshToken = cookie.refreshToken;
  //console.log(refreshToken);
  const user = await User.findOne({ refreshToken });
  
  if (!user) {
    res.clearCookie("refreshToken",
    
      {
        httpOnly: true,
        secure: true,
      });
    return res.sendStatus(204) //.json({ msg: `Please login again` });
  }

  await User.findOneAndUpdate(refreshToken, { refreshToken: "", });
  res.clearCookie("refreshToken",
    
    {
      httpOnly: true,
      secure: true,
    });
  res.sendStatus(204) //.json({ msg: `You were logged out` });
});


//get all users
const getAllUser = asyncHandler(async (req, res) => {
  try {
    const getUser = await User.find();
    res.json({ msg: `All users from DB:`, getUser });
  } catch (error) {
    throw new Error(error);
  }
});

//get just one user
const getUser = asyncHandler(async (req, res) => {
  //console.log(req.params);
  const { id } = req.params;
  validateMongDBid(id);
  try {
    const singleUser = await User.findById(id);
    res.json(singleUser);
  } catch (error) {
    throw new Error(error);
  }
});

//delete user
const delUser = asyncHandler(async (req, res) => {
  //console.log(req.params);
  const { id } = req.params;
  validateMongDBid(id);
  try {
    const dUser = await User.findByIdAndDelete(id);
    res.json({ msg: `User been deleted ${id}`, dUser });
  } catch (error) {
    throw new Error(error);
  }
});

//update user
const updateUser = asyncHandler(async (req, res) => {
  const { _id } = req.user;
  //console.log(req.user);
  validateMongDBid(_id);
  try {
    const updateUser = await User.findByIdAndUpdate(
      _id,
      {
        firstname: req?.body?.firstname,
        lastname: req?.body?.lastname,
        email: req?.body?.email,
        mobile: req?.body?.mobile,
      },
      {
        new: true,
      }
    );
    res.json({ msg: `data was updated`, updateUser });
  } catch (error) {
    throw new Error(error);
  }
});

//block and unblock user functions
const blockUser = asyncHandler(async (req, res) => {
  const { id } = req.params;
  validateMongDBid(id);
  try {
    const blockedUser = await User.findByIdAndUpdate(
      id,
      {
        isBlocked: true,
      },
      {
        new: true,
      }
    );
      res.json({ msg: `User ${blockedUser.firstname} was blocked`, blockedUser });
      console.log(`was blocked ${blockedUser}`);
  } catch (error) {
    throw new Error(error);
  }
});

const unblockUser = asyncHandler(async (req, res) => {
  const { id } = req.params;
  validateMongDBid(id);
  try {
    const unblUser = await User.findByIdAndUpdate(
      id,
      {
        isBlocked: false,
      },
      {
        new: true,
      }
    );
      res.json({ msg: `User ${unblUser.firstname} was unblocked`, unblUser });
      console.log(`was unblock ${unblUser}`);
  } catch (error) {
    throw new Error(error);
  }
});

const updatePassword = asyncHandler(async (req, res) => {
  const { _id } = req.user;
  const password = req.body.password;
  validateMongDBid(_id);
  const user = await User.findById(_id)
  if (password) {
    user.password = password;
    const updtPassword = await user.save();
    res.json(updtPassword);
  } else {
    res.json(user);
  }
})

const forgotPasswordToken = asyncHandler(async (req, res) => {
  const { email } = req.body;
  //console.log(req.body);
  const user = await User.findOne({ email: req.body.email });
  //console.log(user);
  if (!user) throw new Error(`User wasnt found with email like ${email}`)
  try {
    const token = await user.createPasswordResetToken();
    //console.log(token);

    await user.save();

    const resetURL = `Hello, please follow this link to reset your password.This link is valid till 10 min from now.
    <a href='http://localhost:3000/api/user/reset-password/${token}'>Click here</a>`;
    
    const data = {
      to: email,
      text: `Yo bro ${user.firstname}`,
      subject: 'Your forgot password link',
      html: resetURL,
    }
    console.log(data);

    sendEmail(data);
    res.json(token);

  } catch (error) {
    throw new error(error);
  }
})

const resetPassword = asyncHandler(async (req, res) => {
  const { password } = req.body;
  const { token } = req.params;
  //console.log(password);

  const hashedToken = crypto.createHash('sha256').update(token).digest('hex');
  const user = await User.findOne({
    passwordResetToken: hashedToken,
    passwordResetExpires: { $gt: Date.now() }
  });
  if (!user) throw new error("10 min expired, try again");
  user.password = password;
  user.passwordResetToken = undefined;
  user.passwordResetExpires = undefined;
  await user.save();
  res.json(user);
})

module.exports = {
  createUser,
  loginUser,
  getAllUser,
  getUser,
  delUser,
  updateUser,
  blockUser,
  unblockUser,
  handleRefreshToken,
  logOut,
  updatePassword,
  forgotPasswordToken,
  resetPassword
};
