const User = require("../models/userModel");
const asyncHandler = require("express-async-handler");
const { generateToken } = require("../config/jwtToken.js");
const validateMongDBid = require("../utils/validateMonDBid.js");

const createUser = asyncHandler(async (req, res) => {
  const email = req.body.email;
  const findUser = await User.findOne({ email: email });
  if (!findUser) {
    //create a new user
    const newUser = await User.create(req.body);
    res.json({ msg: `Registration was succesfull!`, newUser });
  } else {
    //user already exist
    throw new Error("User already exist");
  }
});

const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;
  //console.log(email, password);
  //checking if user exist
  const findUser = await User.findOne({ email });
  if (findUser && (await findUser.isPasswordMatched(password))) {
    res.json({
      msg: `${findUser.firstname} was succesfully logged in!`,
      _id: findUser?._id,
      firsname: findUser?.firstname,
      lastname: findUser?.lastname,
      email: findUser?.email,
      mobile: findUser?.mobile,
      token: generateToken(findUser?._id),
    });
  } else {
    throw new Error("Invalid credential");
  }
});

//get all users
const getAllUser = asyncHandler(async (req, res) => {
  try {
    const getUser = await User.find();
    res.json({ msg: `All users from DB:`, getUser });
  } catch (error) {
    throw new Error(error);
  }
});

//get just one user
const getUser = asyncHandler(async (req, res) => {
  //console.log(req.params);
  const { id } = req.params;
  validateMongDBid(id);
  try {
    const singleUser = await User.findById(id);
    res.json(singleUser);
  } catch (error) {
    throw new Error(error);
  }
});

//delete user
const delUser = asyncHandler(async (req, res) => {
  //console.log(req.params);
  const { id } = req.params;
  validateMongDBid(id);
  try {
    const dUser = await User.findByIdAndDelete(id);
    res.json({ msg: `User been deleted ${id}`, dUser });
  } catch (error) {
    throw new Error(error);
  }
});

//update user
const updateUser = asyncHandler(async (req, res) => {
  const { _id } = req.user;
  //console.log(req.user);
  validateMongDBid(_id);
  try {
    const updateUser = await User.findByIdAndUpdate(
      _id,
      {
        firstname: req?.body?.firstname,
        lastname: req?.body?.lastname,
        email: req?.body?.email,
        mobile: req?.body?.mobile,
      },
      {
        new: true,
      }
    );
    res.json({ msg: `data was updated`, updateUser });
  } catch (error) {
    throw new Error(error);
  }
});

//block and unblock user functions
const blockUser = asyncHandler(async (req, res) => {
  const { id } = req.params;
  validateMongDBid(id);
  try {
    const blockedUser = await User.findByIdAndUpdate(
      id,
      {
        isBlocked: true,
      },
      {
        new: true,
      }
    );
      res.json({ msg: `User ${blockedUser.firstname} was blocked`, blockedUser });
      console.log(`was blocked ${blockedUser}`);
  } catch (error) {
    throw new Error(error);
  }
});

const unblockUser = asyncHandler(async (req, res) => {
  const { id } = req.params;
  validateMongDBid(id);
  try {
    const unblUser = await User.findByIdAndUpdate(
      id,
      {
        isBlocked: false,
      },
      {
        new: true,
      }
    );
      res.json({ msg: `User ${unblUser.firstname} was unblocked`, unblUser });
      console.log(`was unblock ${unblUser}`);
  } catch (error) {
    throw new Error(error);
  }
});

module.exports = {
  createUser,
  loginUser,
  getAllUser,
  getUser,
  delUser,
  updateUser,
  blockUser,
  unblockUser,
};
